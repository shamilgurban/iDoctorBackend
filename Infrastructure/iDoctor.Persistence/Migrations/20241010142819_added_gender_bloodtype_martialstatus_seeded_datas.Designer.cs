// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iDoctor.Persistence.Context;

#nullable disable

namespace iDoctor.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241010142819_added_gender_bloodtype_martialstatus_seeded_datas")]
    partial class added_gender_bloodtype_martialstatus_seeded_datas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("iDoctor.Domain.Entities.BloodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BloodTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "O(I) Rh+"
                        },
                        new
                        {
                            Id = 2,
                            Type = "O(I) Rh-"
                        },
                        new
                        {
                            Id = 3,
                            Type = "A(II) Rh+"
                        },
                        new
                        {
                            Id = 4,
                            Type = "A(II) Rh-"
                        },
                        new
                        {
                            Id = 5,
                            Type = "B(III) Rh+"
                        },
                        new
                        {
                            Id = 6,
                            Type = "B(III) Rh-"
                        },
                        new
                        {
                            Id = 7,
                            Type = "AB(IV) Rh+"
                        },
                        new
                        {
                            Id = 8,
                            Type = "AB(IV) Rh-"
                        });
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationDocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Qadın"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kişi"
                        });
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.MartialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MartialStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Subay"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Evli"
                        });
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("HealthRecord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MartialStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MartialStatusId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "VerifyDoctor",
                            UserType = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "CreateAppointment",
                            UserType = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "CreateAppointment",
                            UserType = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "UpdatePatient",
                            UserType = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "UpdateDoctor",
                            UserType = 3
                        });
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("iDoctor.Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("iDoctor.Domain.Entities.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.Patient", b =>
                {
                    b.HasOne("iDoctor.Domain.Entities.BloodType", "BloodType")
                        .WithMany("Patients")
                        .HasForeignKey("BloodTypeId");

                    b.HasOne("iDoctor.Domain.Entities.Gender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderId");

                    b.HasOne("iDoctor.Domain.Entities.MartialStatus", "MartialStatus")
                        .WithMany("Patients")
                        .HasForeignKey("MartialStatusId");

                    b.HasOne("iDoctor.Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("iDoctor.Domain.Entities.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodType");

                    b.Navigation("Gender");

                    b.Navigation("MartialStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.BloodType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.MartialStatus", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("iDoctor.Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
